@page "/fetchdata"
@using BlazorApp1.Server.Abstractions.Contracts.JsonContext;
@using BlazorApp1.Shared
@using BlazorApp1.Domain
@using BlazorApp1.Server.Abstractions.Contracts
@using System.Text.Json.Serialization;
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <EditForm Model="@forecastToAdd" OnValidSubmit="@AddForecast">
        <ValidationSummary />

        <InputText @bind-Value="forecastToAdd!.Summary"></InputText>
        <InputDate @bind-Value="forecastToAdd!.Date"></InputDate>
        <InputNumber @bind-Value="forecastToAdd!.TemperatureC"></InputNumber>
        <button type="submit">Submit</button>
    </EditForm>

    <table class="table">
        Day Averages
        <thead>
            <tr>
                <th>Date</th>
                <th>Avg Temp. (C)</th>
                <th>Avg Temp. (F)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecastSummary in forecastSummaries)
            {
                <tr>
                    <td>@forecastSummary.Date.ToShortDateString()</td>
                    <td>@forecastSummary.TemperatureC</td>
                    <td>@forecastSummary.TemperatureF</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecastDto[]? forecasts;
    private WeatherForecastSummary[]? forecastSummaries;
    private WeatherForecastDto? forecastToAdd;
    private static System.Timers.Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        await ReloadDataAsync();
        forecastToAdd = new WeatherForecastDto
            {
                Date = DateTime.Now
            };

        _timer = new System.Timers.Timer(5000);
        _timer.Elapsed += CountDownTimer;
        _timer.Enabled = true;
    }

    public async void CountDownTimer(Object source, System.Timers.ElapsedEventArgs e)
    {
        forecastSummaries = await Http.GetFromJsonAsync<WeatherForecastSummary[]>("WeatherForecastSummary");

        await InvokeAsync(async () =>
        {
            StateHasChanged();
        });
    }
    private async Task AddForecast()
    {
        if (forecastToAdd != null)
        {
            var response = await Http.PostAsJsonAsync<WeatherForecastDto>("WeatherForecast", forecastToAdd, WeatherForecastDtoJsonContext.Default.WeatherForecastDto);
        }

        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecastDto[]>("WeatherForecast", WeatherForecastDtoJsonContext.Default.WeatherForecastDtoArray);
        forecastSummaries = await Http.GetFromJsonAsync<WeatherForecastSummary[]>("WeatherForecastSummary");
    }
}
